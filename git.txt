1. git config --global user.name "Your_name"
adds username to the git config
2. git config --global user.email "email@email.com"
adds user email
working directory |  staging area |  git directory repository
|
|<------<---------<--------checkout the project------|
|
|
|----stage files-->---->| 
|                       | 
|                       |
|
|                       |----------commit-------------->
|
|
-----------------------------------------------------------
3.git init
initialize empty git repository
4. git status
view the status of git workflow
5. git add --a  git add .        git add filename //adds specific files
add all files to staging 
6. git commit -m "Your Message"
commits all the staged files
7. git log
view the log of commits
8. git clone link
clones into new directory makes inside the current directory
9. Make a directory named .gitignore and add filenames and directories to ignore the files from tracking and pushing
10. git diff 
Compares working directory with staging area
11. git diff --staged
Compares staging area with previous commit
12. git commit -a -m "Comment"
skips the staging area ->direclty commits all the staged files(doesnt commit untracked files)
13. git rm filename.exe 
removes file and stages the change
14. git mv filename.exe renamed.exe
renames filename with renamed 
15. If we modify the .gitignore file and add file name Suprim.txt on it so that it is ignored. Even though it is ignored, changes in that file will be shown as modified. So we need to run the below command so that the file wont be shown as  modified in the working tree when we use git status.:
16. git rm --cached filename
Untracks the file with filename
17. git log -p     replace p with integer to view integral number of commits
view the git log with differences too
18. git log --stat   //git log --pretty= oneline  (shows in 1 line)
shows git log in short
19.git log --pretty=short   (--pretty = long)
view log in short
20. git log --since= x.days
shows log for x days/ weeks /months/years
21. Use git asm for documentation
22.git commit --amend
amend previous commit
23. git restore --staged filename
unstage a file
24. git checkout -- filename.txt
Reverts the file to the previous git commit only for the file "filename.txt"
26. git checkout -f 
Reverts every changes to the previous commit
27. git remote add origin git@github.com:suprimkoirala/github_repo_name
--> add url as origin as a remote
28.git remote 
shows the remote where we are at currently
29. git remote -v 
shows the push and pull repo link
30. git push -u origin master
pushes the updates on the origin repo
31. git config --global alias.st status
aliases git st as git status
32. git config --global alias.unstage 'restore --staged --'
aliases unstage with restore... 
33. git checkout -b develop
makes a new branch develop and switches to it
34. git checkout master
switches branch to master 
35. git branch
shows branches 
36. git merge branch_1  // when in branch master  
merges branch_1 to maste
37. git branch -v
last commit of every branch
38. git branch --merged
shows already merged branches
39. git branch --no-merged
shows unmerged branches
40. git branch -d branch_name
deletes branch branch_name gives error if the branch not merged. Using -D deletes forcefully
42. git push origin branchname
pushes branch name to remote repo   //make sure youre in the same branch
43. git push localbranch:remote_branch
pushes local branch as remote branch
!!!Use same name for remote and local branch
44. git push -d origin branchname 
deletes branch "branchname" from remote repo
